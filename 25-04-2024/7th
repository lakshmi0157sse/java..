import java.util.Scanner;
class Customer {
    private int accountNo;
    private String accName;
    private double balance;
    // Constructor to initialize the account
    public Customer(int accountNo, String accName, double balance) {
        this.accountNo = accountNo;
        this.accName = accName;
        this.balance = balance;
    }
    // Synchronized method to withdraw money
    public synchronized void withdraw(double amount) {
        System.out.println("Trying to withdraw: " + amount);
        // Check if balance is sufficient
        while (balance < amount) {
            System.out.println("Insufficient balance. Waiting for deposit...");
            try {
                wait();  // Wait for deposit
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        balance -= amount;
        System.out.println("Withdrawal successful. Remaining balance: " + balance);
    }
    // Synchronized method to deposit money
    public synchronized void deposit(double amount) {
        System.out.println("Depositing: " + amount);
        balance += amount;
        System.out.println("Deposit successful. Current balance: " + balance);
        notify();  // Notify waiting threads (withdrawal) to proceed
    }
}
public class BankApp {
    public static void main(String[] args) {
        // Initialize Customer account with an initial balance of 10000
        Customer customer = new Customer(101, "John Doe", 10000);
        Scanner sc = new Scanner(System.in);
        // Create a thread for withdrawal
        Thread withdrawThread = new Thread(() -> {
            System.out.print("Enter amount to withdraw: ");
            double withdrawAmount = sc.nextDouble();
            customer.withdraw(withdrawAmount);
        });
        // Create a thread for deposit
        Thread depositThread = new Thread(() -> {
            System.out.print("Enter amount to deposit: ");
            double depositAmount = sc.nextDouble();
            customer.deposit(depositAmount);
        });
        // Start the withdraw thread
        withdrawThread.start();
        try {
            // To simulate a time delay before the deposit is made
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        // Start the deposit thread after delay
        depositThread.start();
    }
}
0 commit comments
Comments
0
 (0)
Comment
You're receivi
