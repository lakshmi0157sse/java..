import java.util.stream.IntStream;

public class StatisticsCalculator {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

       
        System.out.print("Enter the number of elements: ");
        int n = scanner.nextInt();
        int[] numbers = new int[n];

        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }

       
        double mean = calculateMean(numbers);
        System.out.println("Mean: " + mean);

      
        double median = calculateMedian(numbers);
        System.out.println("Median: " + median);

       
        int mode = calculateMode(numbers);
        System.out.println("Mode: " + mode);

        scanner.close();  
    }

    
    public static double calculateMean(int[] numbers) {
        return IntStream.of(numbers).average().orElse(Double.NaN);
    }

    // Method to calculate the Median
    public static double calculateMedian(int[] numbers) {
        Arrays.sort(numbers);
        int length = numbers.length;
        if (length % 2 == 0) {
            return (numbers[length / 2 - 1] + numbers[length / 2]) / 2.0;
        } else {
            return numbers[length / 2];
        }
    }

  
    public static int calculateMode(int[] numbers) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : numbers) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        int mode = numbers[0];
        int maxCount = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() > maxCount) {
                mode = entry.getKey();
                maxCount = entry.getValue();
            }
        }

        return mode;
    }
}
